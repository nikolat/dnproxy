
【改定履歴】
1.3.1.0 -> 2.0.0.0 -----------------------------------------------------------------------
アーキテクチャの大幅な変更。

ベースディレクトリをexeのある場所からゴーストディレクトリに変更。
Ukagaka.NET.Interfaces.dllをゴーストディレクトリから読み込むように変更したため、
exeフォルダに配置する必要がなくなった。
ファイルをキャッシングし、変更があった時だけ再コンパイルするように変更。
コンパイルされたアセンブリと関連リソースさえあれば、
ソースコードをnarに同梱しなくても動くようになった。簡易暗号化にもなる。
リモートクラスによる中継を廃止し、ユーザーアセンブリを直接リモートするように変更。
ソースコードがディレクトリ単位で指定可能になった。iniの書式を若干変更。
dnproxy.dll.configに必要な設定をいくつか追加。

[dnproxy.dll]
プロキシ以外の機能を外部に移動。

[dnutil.dll]
コンパイラやロガー等を含むユーティリティアセンブリ。
ユーザーアセンブリのコンパイルに使用。
そういった機能が必要なければ配布時には同梱必須ではない。

[dngen.dll]+dngen.ini
主にdnutil.dllをカスタマイズしたい時に使う。カスタマイズしないなら不要。
dnutil.dllを実行時コンパイルしたい時や、
起動と同時に何かのソースをコンパイルする等の目的にも使用できる。
機能はdnutil.dllとほぼ等価。

【修正が必要な個所】
Ukagaka.NET.Interfaces.dllをゴーストディレクトリに置いてください。
開発時には、dnutil.dllをゴーストディレクトリに置いてください。
配布時には参照アセンブリに指定しない限りdnutil.dllは必要ありません。
dnutil.dll+dnproxy.iniでユーザーアセンブリをコンパイルする代わりに、
dngen.dll+dngen.iniでも同じことができます。
dnproxy.dll.configに
PrivateBinPath: ユーザーアプリケーションドメインがアセンブリを検索するパス
AssemblyName: ユーザーアセンブリ名
MainClass: ユーザーアセンブリのメインクラスのフルネーム
Protocol: ユーザーアセンブリのプロトコル
を追加してください。
ユーザーソースコードのメインクラスはMarshalByRefObjectを継承するように変更してください。
dnproxy.iniの
設定でプライベート参照アセンブリの頭に@が不要になりました。
@をつけている場合は削除してください。

1.3.0.0 -> 1.3.1.0 -----------------------------------------------------------------------
[dnproxy_debug.dll]
Proxy.cs
Request時のインターフェイスがIUkagakaになったままだった問題を修正。
実際はコンパイルに失敗していたのかもしれないが、なぜかテスト起動したので気づかず。

1.2.0.0 -> 1.3.0.0 -----------------------------------------------------------------------
[dnproxy.dll]
Proxy.cs
exeが同一フォルダにあるとエラーを発生する問題を修正。
将来的なUkagaka.NET.Interfaces.dllのバージョンアップ時の互換性のために
継承するインターフェイスをIUkagakaから各々のインターフェイスに変更。

dnproxy.dll.config
UserSettingsになっていた部分をApplicationSettingsに変更。

[Ukagaka.NET.Interfaces.dll] Version 1.2.0.0
不要になったIUkagakaインターフェイスを削除。今度こそ最終版。

1.1.0.0 -> 1.2.0.0 -----------------------------------------------------------------------
2008.5.24
[dnproxy.dll]
Proxy.cs
IRemoteクラスのコードの整理。
MethodInfoのInvokeからインターフェイスをキャストする仕様に変更。
無駄に肥大化していたinitializeメソッドがすっきりした。
構成ファイルdnproxy.dll.configでログ設定をするように変更したため、
descript.txtでの設定は不要になりました。

Logger.cs
設定情報を文字列として取得・設定できるプロパティ
public static string Logger.LogLogLevelString
public static string Logger.LogCharsetString
Exceptionクラスを引数に取るメソッド
public static void Logger.Write(Logger.Level level, Exception e)
を追加。

[Ukagaks.NET.Interfaces.dll] Version 1.1.0.0
Ukagaks.NET.Interfaces.cs
インターフェイスのネームスペースをUkagaks.NET.Interfacesに変更。
using Ukagaka.NET.Interfaces;
をメインクラスを含む（伺かインターフェイスを持つ）
ユーザーソースコードに追加する必要があります。
IShiori2xインターフェイスを廃止し、かわりにIShiori20 〜 IShiori26
インターフェイスを追加。ただしObsolete属性。ISchedule10もObsolete属性に。
使おうと思う人はいないと思いますが。
利便性のためにインターフェイスをメソッド毎に分解。
これらはユーザーが使用するものではありませんので、
ユーザーソースコードへの影響はないと思われます。


1.0.0.0 -> 1.1.0.0 -----------------------------------------------------------------------
2008.5.22
同じアセンブリ名を持つアセンブリ間で
データが共有されて滅茶苦茶になる現象をDLL Heavenと呼ぶことにする。

DLL Heaven対策のための大幅な改定。
他のD.N.Proxyがある時、データを共有してしまっていた。
インターフェイス定義をUkagaka.NET.Interfaces.dllにパージ。

*重要*
Ukagaka.NET.Interfaces.dllをベースウェアと同じディレクトリに入れなければならない。
今のところ最も最善と思われる方法。


[dnproxy.dll]
別のアプリケーションドメインを作成し、アセンブリのパスで個々を識別する形に変更。
Ukagaka.NET.IUkagakaインターフェイス経由で個々のアプリケーションドメインを操作する。

Proxy.cs
新たにProxyクラスを作成し、今までのProxyクラスはRemoteクラスに変更。
Proxyクラスでアプリケーションドメインを作成し
そのアプリケーションドメイン上にRemoteインスタンスを作成するようにした。
不要になったためRemoteクラスのlogsendメソッドは削除。

Logger.cs
LevelにFlagsAttribute属性をつけた。
Levelのbyte型指定を削除（＝int型に変更）（ドキュメントに表示されないため一般性を優先）

Compiler.cs
エントリの値をチェックする時に、Trim()を増やして正確なチェックをするようにした。
ソースの言語がデフォルトでCShaprだったが、あまり意味がないので
無指定の場合例外を返すようにした。伴ってdnproxy.iniのLanguageエントリが必須に。
コンパイル時にロガーを使った記録から、例外にエラー情報を乗せて返すように変更。依存を減らす方向。

Interfaces.cs
Ukagaka.NET.Interfaces.dllに移動。


[Ukagaka.NET.Interfaces.dll]
伺かのインターフェイス定義を含むアセンブリ。
新規に作成。ベースウェアと同じフォルダに配置しなければならない。

Interfaces.cs
全ての伺かインターフェイスを含むIUkagakaインターフェイスを追加。


[RPInvoke.exe]
RPInvoke.cs
・メソッド名検索正規表現に、空白1バイトを足して厳密性を少しだけ強化。元がかなり甘いです。
・app.exe.configのExportClassをProxy から D.N.Proxyに変更して厳密性をさらに少しだけ強化。


[dnproxy.ini]
%APPDIR%でベースウェアのディレクトリを参照できるようにした。
ほぼUkagaka.NET.Interfaces.dll専用。
%APPDIR%Ukagaka.NET.Interfaces.dllをReferencedAssembliesエントリに追加してください。


[その他]
ユーザーソースコードレベルでの変更は不要です。
